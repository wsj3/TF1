// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for therapists and admin users
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String?
  password          String    // Hashed password
  role              Role      @default(THERAPIST)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  profile           Profile?
  clients           Client[]
  sessions          Session[]
  notes             Note[]
  treatmentPlans    TreatmentPlan[]
}

// Profile for additional therapist information
model Profile {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String?
  bio               String?
  specialties       String[]
  phoneNumber       String?
  address           String?
  profileImageUrl   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Client/Patient model
model Client {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  email             String?
  phoneNumber       String?
  dateOfBirth       DateTime?
  address           String?
  emergencyContact  String?
  status            ClientStatus @default(ACTIVE)
  therapistId       String
  therapist         User      @relation(fields: [therapistId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  sessions          Session[]
  notes             Note[]
  treatmentPlans    TreatmentPlan[]
  tasks             Task[]
}

// Session/Appointment model
model Session {
  id                String    @id @default(uuid())
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapistId       String
  therapist         User      @relation(fields: [therapistId], references: [id])
  startTime         DateTime
  endTime           DateTime
  status            SessionStatus @default(SCHEDULED)
  notes             Note[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Client notes
model Note {
  id                String    @id @default(uuid())
  content           String
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapistId       String
  therapist         User      @relation(fields: [therapistId], references: [id])
  sessionId         String?
  session           Session?  @relation(fields: [sessionId], references: [id])
  noteType          NoteType  @default(SESSION_NOTE)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Treatment Plan model
model TreatmentPlan {
  id                String    @id @default(uuid())
  title             String
  description       String
  goals             Goal[]
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapistId       String
  therapist         User      @relation(fields: [therapistId], references: [id])
  status            PlanStatus @default(ACTIVE)
  startDate         DateTime  @default(now())
  endDate           DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Goals within treatment plans
model Goal {
  id                String    @id @default(uuid())
  description       String
  targetDate        DateTime?
  completedDate     DateTime?
  status            GoalStatus @default(IN_PROGRESS)
  treatmentPlanId   String
  treatmentPlan     TreatmentPlan @relation(fields: [treatmentPlanId], references: [id], onDelete: Cascade)
  tasks             Task[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Tasks for tracking client progress
model Task {
  id                String    @id @default(uuid())
  title             String
  description       String?
  dueDate           DateTime?
  completedDate     DateTime?
  status            TaskStatus @default(PENDING)
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  goalId            String?
  goal              Goal?     @relation(fields: [goalId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Enums
enum Role {
  ADMIN
  THERAPIST
  ASSISTANT
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ONBOARDING
  DISCHARGED
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NoteType {
  SESSION_NOTE
  PROGRESS_NOTE
  INTAKE_NOTE
  DISCHARGE_NOTE
  GENERAL_NOTE
}

enum PlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DISCONTINUED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 